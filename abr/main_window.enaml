import os.path
import urllib

from enaml.application import deferred_call
from enaml.layout.api import InsertItem, InsertTab
from enaml.stdlib.message_box import critical
from enaml.widgets.api import (MainWindow, DockArea, DockItem, PushButton,
                               Container, MPLCanvas, Feature, ProgressBar,
                               Label, HGroup, PopupView, VGroup)

from .datatype import Point


def bind(figure, presenter):
    figure.canvas.mpl_connect('button_press_event',
                              lambda e: onclick(presenter, e))
    figure.canvas.mpl_connect('key_press_event',
                              lambda e: onpress(presenter, e))


def onclick(presenter, event):
    pass


def onpress(presenter, event):
    try:
        if event.key == 'down':
            presenter.current -= 1
        elif event.key == 'up':
            presenter.current += 1
        elif event.key == 't':
            presenter.set_threshold()
        elif event.key == 'alt+up':
            presenter.set_subthreshold()
        elif event.key == 'alt+down':
            presenter.set_suprathreshold()
        elif event.key in ('-', '_'):
            presenter.scale *= 1.1
        elif event.key in ('=', '+'):
            presenter.scale *= 0.9
        elif event.key == 'i':
            if not presenter.P:
                presenter.guess_p()
            elif not presenter.N:
                presenter.guess_n()
        elif event.key == 'u':
            presenter.update_point()
        elif event.key == 's':
            presenter.save()
        elif event.key == 'right':
            presenter.move_selected_point(('zero_crossing', 1))
        elif event.key == 'left':
            presenter.move_selected_point(('zero_crossing', -1))
        elif event.key == 'alt+right':
            presenter.move_selected_point(('time', 1e-5))
        elif event.key == 'alt+left':
            presenter.move_selected_point(('time', -1e-5))
        elif event.key == 'n':
            presenter.normalized = not presenter.normalized
        elif event.key in ('1', '2', '3', '4', '5'):
            presenter.toggle = int(event.key), Point.PEAK
        elif event.key in ('alt+1', 'alt+2', 'alt+3', 'alt+4', 'alt+5'):
            presenter.toggle = int(event.key[-1]), Point.VALLEY
        elif event.key == 'pagedown':
            presenter.load_next()
        elif event.key == 'pageup':
            presenter.load_prior()
    except Exception as e:
        raise
        #critical(None, 'Error', str(e))

enamldef NotificationPopup(PopupView):
    foreground = 'white'
    background = 'rgba(30, 30, 30, 0.85)'
    window_type = 'tool_tip'
    anchor_mode = 'cursor'
    parent_anchor = (1.0, 1.0)
    anchor = (0.0, 0.0)
    offset = (0, 0)
    timeout = 5
    fade_in_duration = 500
    fade_out_duration = 500
    Container:
        Label:
            foreground = 'white'
            text = 'Analysis has been saved'
            align = 'center'

enamldef SerialWindow(MainWindow):

    attr presenter
    initial_size = (600, 900)

    Container:

        HGroup:
            VGroup:
                Label:
                    text = 'Progress (n={})'.format(len(presenter.unprocessed))
                ProgressBar:
                    value << presenter.current_model
                    maximum << len(presenter.unprocessed)
                    text_visible = True
            VGroup:
                PushButton:
                    text = 'All above threshold'
                    clicked ::
                        presenter.set_suprathreshold()
                PushButton:
                    text = 'All below threshold'
                    clicked ::
                        presenter.set_subthreshold()

        Label:
            text << '{} kHz'.format(presenter.model.freq)

        MPLCanvas: canvas:
            figure << presenter.figure
            toolbar_visible = False
            initialized ::
                deferred_call(bind, figure, presenter)


enamldef MPLDockItem(DockItem):

    attr presenter

    Container:
        MPLCanvas: canvas:
            figure << presenter.figure
            toolbar_visible = False
            initialized ::
                deferred_call(bind, figure, presenter)


def add_dock_item(dock_area, model, path, parser, n_waves):
    from abr.presenter import WaveformPresenter
    presenter = WaveformPresenter(parser, n_waves)
    items = dock_area.dock_items()
    n_items = len(items)

    target = items[-1].name if n_items else ''
    title = '{:.2f} kHz - {}'.format(model.freq, os.path.basename(path))
    item = MPLDockItem(dock_area,
                       name='dock_{}'.format(n_items),
                       title=title,
                       presenter=presenter)

    op = InsertTab(item=item.name, target=target)
    dock_area.update_layout(op)
    presenter.load(model)


def load_files(parser, filenames, dock_area, n_waves):
    for filename in filenames:
        for model in parser.load(filename):
            try:
                add_dock_item(dock_area, model, filename, parser, n_waves)
            except FileNotFoundError:
                mesg = 'Could not load ABR data from {}'.format(path)
                critical(None, 'Could not load file', mesg)


enamldef DNDWindow(MainWindow):
    title = "ABR / CAP Analysis"
    attr options
    attr message = "Drag and Drop a File Below"
    attr controls = "i \t-> estimate peaks (press again for valleys)\nu \t-> guess location of marker for wubsequent waveforms\nn \t-> normalize waveforms\nt \t-> set threshold\ns \t-> save amplitude and latency of peaks (must have set threshold and calculated BOTH peaks and valleys)\n+/- \t-> Change scaling factor"

    attr parser
    attr n_waves

    initial_size = (600, 900)

    Container:
        Label:
            text = message
            align = 'center'
        Label:
            text = controls
            align = 'left'
        DockArea: dock_area:
            name = 'dock_area'
            features = Feature.DropEnabled

            drag_enter => (event):
                if event.mime_data().has_format('text/uri-list'):
                    event.accept_proposed_action()

            drop => (event):
                text = event.mime_data().data('text/uri-list').decode('utf-8')
                filenames = []
                for t in text.strip().split('\n'):
                    t = urllib.parse.unquote(t).strip()
                    fragments = urllib.parse.urlsplit(t)
                    path = fragments.path
                    filenames.append(path)
                load_files(parser, filenames, dock_area, n_waves)
